# module_6_1.py

# Создаём класс родитель для животных - Animal
class Animal:
    def __init__(self, name):
        # Устанавливаем начальное состояние: животное живое и не накормленное
        self.alive = True  # Животное живое
        self.fed = False  # Животное не накормлено
        self.name = name  # Индивидуальное название животного


# Создаём класс родитель для растений - Plant
class Plant:
    def __init__(self, name, edible=False):
        # Устанавливаем начальное состояние: растение съедобное или несъедобное
        self.edible = edible  # По умолчанию растение несъедобное
        self.name = name  # Индивидуальное название растения


# Создаём класс Млекопитающие - наследник для класса Животных.
class Mammal(Animal):
    # Создаём метод eat для млекопитающих, позволяющий им есть растения
    def eat(self, food):
        # Проверяем, является ли еда растением
        if isinstance(food, Plant):
            # Если растение съедобное
            if food.edible:
                print(f"{self.name} съел {food.name}")  # Животное съело растение
                self.fed = True  # Животное накормлено
            else:
                print(f"{self.name} не стал есть {food.name}")  # Животное отказалось от еды
                self.alive = False  # Животное погибло из-за несъедобного растения
        else:
            # Если еда не является растением
            print(f"{food.name} не является растением. {self.name} не может это съесть.")


# Создаём класс Хищники - наследник для класса Животных.
class Predator(Animal):
    # Создаём метод eat для хищников, позволяющий им есть растения
    def eat(self, food):
        # Проверяем, является ли еда растением
        if isinstance(food, Plant):
            # Если растение съедобное
            if food.edible:
                print(f"{self.name} съел {food.name}")  # Хищник съел растение
                self.fed = True  # Хищник накормлен
            else:
                print(f"{self.name} не стал есть {food.name}")  # Хищник отказался от еды
                self.alive = False  # Хищник погиб из-за несъедобного растения
        else:
            # Если еда не является растением
            print(f"{food.name} не является растением. {self.name} не может это съесть.")


# Создаём класс Цветы - наследник для класса Растений.
class Flower(Plant):
    def __init__(self, name):
        # Вызываем конструктор родительского класса Plant и устанавливаем, что цветы несъедобные
        super().__init__(name, edible=False)  # Цветы по умолчанию несъедобные


# Создаём класс Фрукты - наследник для класса Растений.
class Fruit(Plant):
    def __init__(self, name):
        # Вызываем конструктор родительского класса Plant и устанавливаем, что фрукты съедобные
        super().__init__(name, edible=True)  # Фрукты по умолчанию съедобные


# Пример использования
# Создаём объект хищника с именем 'Волк с Уолл-Стрит'
a1 = Predator('Волк с Уолл-Стрит')
# Создаём объект млекопитающего с именем 'Хатико'
a2 = Mammal('Хатико')
# Создаём объект цветка с именем 'Цветик семицветик'
p1 = Flower('Цветик семицветик')
# Создаём объект фрукта с именем 'Заводной апельсин'
p2 = Fruit('Заводной апельсин')

# Выводим имя хищника
print(a1.name)  # Волк с Уолл-Стрит
# Выводим имя цветка
print(p1.name)  # Цветик семицветик

# Выводим, жив ли хищник
print(a1.alive)  # True
# Выводим, накормлено ли млекопитающее
print(a2.fed)  # False

# Хищник пытается съесть цветок
a1.eat(p1)  # Волк с Уолл-Стрит не стал есть Цветик семицветик

# Млекопитающее пытается съесть фрукт
a2.eat(p2)  # Хатико съел Заводной апельсин

# Выводим, жив ли хищник после попытки съесть несъедобное растение
print(a1.alive)  # False

# Выводим, накормлено ли млекопитающее после съедения съедобного фрукта
print(a2.fed)  # True

# https://github.com/WavRunja/UrbanUniversityPythonDeveloperMyHomework
