# Game_guess_the_number

# Необходимо создать игру "Угадай число". Загадывается число в диапазоне от 1 до 500,
# после чего пользователю необходимо его угадать. После того, как пользователь вводит
# своё предположение программа даёт ему обратную связь о том, что загаданное число
# больше или меньше, чем предположение. Пользователь вводит числа до тех пор, пока
# не угадает или не введёт 0. После угаданного числа показывается количестве попыток,
# которые понадобились пользователю.
# Доп задание*
# Реализовать в отдельном модуле "Искусственный интеллект" для игры, чтобы он
# автоматически пытался угадывать число, основываясь на обратной связи(запрещается
# использовать простой перебор).

import random

def game_guess_the_number():
    # Cоздаем переменную для хранения случайного загаданного числа от 1 до 500
    number_to_guess = random.randint(1, 500)
    # Cоздаем переменную счетчик для хранения количества попыток
    attempts = 0
    print("Игра 'Угадай число'. \nПредлагаем отгадать загаданное число в диапазоне от 1 до 500.")
    print("Если не хотите играть, введите 0 для выхода из игры.")

    # Тело цикла игры
    while True:
        # Cоздаем переменную для хранения пользовательского ввода данных
        user_input = input("Введите предполагаемое число: ")
        
        # Обработка исключений
        try:
            # Пасхалка
            if user_input.lower() == "help":
                print("""Подсказка: \nвоспользуйтесь бинарным поиском для уменьшения \nколичества попыток поиска загаданного числа.
Надеюсь, не нужно объяснять, когда эти числа вычитать, а когда складывать:\n250 - 125 - 62 - 31 - 16 - 8 - 4 - 2 - 1
Удачи!""")

                continue
            # Cоздаем переменную для хранения предполагаемого числа, преобразуем пользовательский ввод в целое число
            guess = int(user_input)            
        # В блоке except исключение c ошибочным значением ValueError для переменной guess перехватывается
        except ValueError:            
            # Указываем пользователю на совершенную ошибку ввода
            print("Пожалуйста, введите число.")
            # Продолжаем ввод данных до тех пор, пока пользователь не напишет целое число.
            continue

        # Проверяем если пользователь вводит 0, то завершаем игру.
        if guess == 0:
            print("Игра завершена. До свидания!")
            # Выходим из цикла игры.
            break
        
        # Увеличиваем счетчик количества попыток на единицу
        attempts += 1

        # Проверяем, если предполагаемое число меньше загаданного
        if guess < number_to_guess:
            # Информируем о превосходящем значении пользователя.
            print("Загаданное число больше.")
        # Проверяем, если предполагаемое число больше загаданного    
        elif guess > number_to_guess:
            # Информируем о меньшем значении пользователя.
            print("Загаданное число меньше.")
        # Проверяем, если пользователь угадал число
        else:
            print(f"Поздравляю! Вы угадали число {number_to_guess} за {attempts} попыток.\nИгра завершена. До свидания!")
            # Выходим из цикла игры.
            break

# Получаем значение загаданного числа для второго варианта игры
def get_secret_number():
    # Возвращаем полученное значение
    return random.randint(1, 500)
