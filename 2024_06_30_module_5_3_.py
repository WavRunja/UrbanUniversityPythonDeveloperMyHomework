# module_5_3.py

# Задача "История строительства":
# Для решения этой задачи будем пользоваться решением к предыдущей задаче "Перегрузка операторов".
# 
# В классе House создайте атрибут houses_history = [], который будет хранить названия созданных объектов.
# 
# Правильней вписывать здание в историю сразу при создании объекта, тем более можно удобно обращаться к
# атрибутам класса используя ссылку на сам класс - cls.
# Дополните метод __new__ так, чтобы:
# Название объекта добавлялось в список cls.houses_history.
# Название строения можно взять из args по индексу.
# 
# Также переопределите метод __del__(self) в котором будет выводиться строка:
# "<название> снесён, но он останется в истории"
# 
# Создайте несколько объектов класса House и проверьте работу методов __del__ и __new__, а также значение
# атрибута houses_history.
# 
# Пример результата выполнения программы:
# Пример выполнения программы:
# h1 = House('ЖК Эльбрус', 10)
# print(House.houses_history)
# h2 = House('ЖК Акация', 20)
# print(House.houses_history)
# h3 = House('ЖК Матрёшки', 20)
# print(House.houses_history)
# 
# # Удаление объектов
# del h2
# del h3
# 
# print(House.houses_history)
# 
# Вывод на консоль:
# ['ЖК Эльбрус']
# ['ЖК Эльбрус', 'ЖК Акация']
# ['ЖК Эльбрус', 'ЖК Акация', 'ЖК Матрёшки']
# ЖК Акация снесён, но он останется в истории
# ЖК Матрёшки снесён, но он останется в истории
# ['ЖК Эльбрус', 'ЖК Акация', 'ЖК Матрёшки']
# ЖК Эльбрус снесён, но он останется в истории
# 
# Примечания:
# Более подробно о работе метода __new__ можно узнать здесь.
# В методе __new__ можно обращаться к атрибутам текущего класса при помощи параметра cls.

class House:
    houses_history = []  # Атрибут класса для хранения истории созданных объектов

    def __new__(cls, *args, **kwargs):
        """Создание нового объекта и добавление его в историю."""
        # args[0] предполагается названием дома
        if len(args) > 0:
            cls.houses_history.append(args[0])
        # Создаем новый объект
        instance = super().__new__(cls)
        return instance

    def __init__(self, name, number_of_floors=0):
        """Инициализация объекта."""
        self.name = name  # Название дома
        self.number_of_floors = number_of_floors  # Количество этажей

    def __del__(self):
        """Удаление объекта с сообщением."""
        print(f"{self.name} снесён, но он останется в истории")

    def __str__(self):
        """Строковое представление объекта."""
        return f"Название: {self.name}, кол-во этажей: {self.number_of_floors}"


# Пример использования класса House
h1 = House('ЖК Эльбрус', 10)
print(House.houses_history)  # Вывод: ['ЖК Эльбрус']

h2 = House('ЖК Акация', 20)
print(House.houses_history)  # Вывод: ['ЖК Эльбрус', 'ЖК Акация']

h3 = House('ЖК Матрёшки', 20)
print(House.houses_history)  # Вывод: ['ЖК Эльбрус', 'ЖК Акация', 'ЖК Матрёшки']

# Удаление объектов
del h2  # Вывод: ЖК Акация снесён, но он останется в истории
del h3  # Вывод: ЖК Матрёшки снесён, но он останется в истории

print(House.houses_history)  # Вывод: ['ЖК Эльбрус', 'ЖК Акация', 'ЖК Матрёшки']

# Очистка истории при завершении работы программы
del h1  # Вывод: ЖК Эльбрус снесён, но он останется в истории
